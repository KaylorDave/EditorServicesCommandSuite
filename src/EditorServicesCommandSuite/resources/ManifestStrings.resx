<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModuleToProcess" xml:space="preserve">
    <value>Script module or binary module file associated with this manifest</value>
  </data>
  <data name="RootModule" xml:space="preserve">
    <value>Script module or binary module file associated with this manifest.</value>
  </data>
  <data name="NestedModules" xml:space="preserve">
    <value>Modules to import as nested modules of the module specified in RootModule/ModuleToProcess</value>
  </data>
  <data name="GUID" xml:space="preserve">
    <value>ID used to uniquely identify this module</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Author of this module</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Company or vendor of this module</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>Copyright statement for this module</value>
  </data>
  <data name="ModuleVersion" xml:space="preserve">
    <value>Version number of this module.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description of the functionality provided by this module</value>
  </data>
  <data name="PowerShellVersion" xml:space="preserve">
    <value>Minimum version of the PowerShell engine required by this module</value>
  </data>
  <data name="CLRVersion" xml:space="preserve">
    <value>Minimum version of the common language runtime (CLR) required by this module. {0}</value>
  </data>
  <data name="RequiredModules" xml:space="preserve">
    <value>Modules that must be imported into the global environment prior to importing this module</value>
  </data>
  <data name="ScriptsToProcess" xml:space="preserve">
    <value>Script files (.ps1) that are run in the caller's environment prior to importing this module.</value>
  </data>
  <data name="TypesToProcess" xml:space="preserve">
    <value>Type files (.ps1xml) to be loaded when importing this module</value>
  </data>
  <data name="FormatsToProcess" xml:space="preserve">
    <value>Format files (.ps1xml) to be loaded when importing this module</value>
  </data>
  <data name="RequiredAssemblies" xml:space="preserve">
    <value>Assemblies that must be loaded prior to importing this module</value>
  </data>
  <data name="FileList" xml:space="preserve">
    <value>List of all files packaged with this module</value>
  </data>
  <data name="PrivateData" xml:space="preserve">
    <value>Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.</value>
  </data>
  <data name="PSData" xml:space="preserve">
    <value>PSData data to pass to the Publish-Module cmdlet</value>
  </data>
  <data name="Tags" xml:space="preserve">
    <value>Tags applied to this module. These help with module discovery in online galleries.</value>
  </data>
  <data name="ProjectUri" xml:space="preserve">
    <value>A URL to the main website for this project.</value>
  </data>
  <data name="LicenseUri" xml:space="preserve">
    <value>A URL to the license for this module.</value>
  </data>
  <data name="IconUri" xml:space="preserve">
    <value>A URL to an icon representing this module.</value>
  </data>
  <data name="ReleaseNotes" xml:space="preserve">
    <value>ReleaseNotes of this module</value>
  </data>
  <data name="FunctionsToExport" xml:space="preserve">
    <value>Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.</value>
  </data>
  <data name="AliasesToExport" xml:space="preserve">
    <value>Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.</value>
  </data>
  <data name="CmdletsToExport" xml:space="preserve">
    <value>Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.</value>
  </data>
  <data name="VariablesToExport" xml:space="preserve">
    <value>Variables to export from this module</value>
  </data>
  <data name="DscResourcesToExport" xml:space="preserve">
    <value>DSC resources to export from this module</value>
  </data>
  <data name="CompatiblePSEditions" xml:space="preserve">
    <value>Supported PSEditions</value>
  </data>
  <data name="ProcessorArchitecture" xml:space="preserve">
    <value>Processor architecture (None, X86, Amd64) required by this module</value>
  </data>
  <data name="ModuleList" xml:space="preserve">
    <value>List of all modules packaged with this module</value>
  </data>
  <data name="DotNetFrameworkVersion" xml:space="preserve">
    <value>Minimum version of Microsoft .NET Framework required by this module. {0}</value>
  </data>
  <data name="PowerShellHostName" xml:space="preserve">
    <value>Name of the PowerShell host required by this module</value>
  </data>
  <data name="PowerShellHostVersion" xml:space="preserve">
    <value>Minimum version of the PowerShell host required by this module</value>
  </data>
  <data name="HelpInfoURI" xml:space="preserve">
    <value>HelpInfo URI of this module</value>
  </data>
  <data name="DefaultCommandPrefix" xml:space="preserve">
    <value>Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.</value>
  </data>
</root>
